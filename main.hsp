
    #include "mod_joystick.as"
    #include "hspext.as"
    #include "cfg.as"

    #packopt name "ZRMC"

    // MARK: define

    #enum   MASCON_POS  = 3 // マスコン位置
    #enum   PUSH_BUTTON = 8 // 押されているボタン
    #enum   PUSHING         // 押されているボタンの数

    #define titleName   "Zuiki RTM MasConverter"

    // buttonkeyなどの配列の要素名
    #enum masconB = 0
    #enum masconP
    #enum btnA
    #enum btnB
    #enum btnX
    #enum btnY
    #enum btnZL
    #enum btnLL
    #enum btnZR
    #enum btnRR
    #enum btnPL
    #enum btnMN
    #enum btnSH
    #enum btnHM

    #define singleButtonIndex 2   // buttonkeyなどで、どこからbuttonが始まるか

    #define true    1
    #define false   0

    #define Increase    0
    #define Decrease    1

    #define wasIncreasedMasconPos   prevMasconPos > nowMasconPos
    #define WasDecreasedMasconPos   prevMasconPos < nowMasconPos

    #define forever -1


    #module ZRMCTools

        #define global handleError(%1, %2=0, %3=0) handleErrorF@ZRMCTools %1, %2, %3

        #deffunc local handleErrorF str errmessage, int type, int value

            if ( type ) {

                dialog "エラー: "+ errmessage +"\n開発者にお問い合わせください。\n\nデバッグ用コード: "+ value, 1, titleName@

            } else {

                dialog "エラー: "+ errmessage, 1, titleName@

            }

            end

        return

        #defcfunc notchSkipProcess array skipNotchs, array notchs, int masconPos, int adj

            notchSkip = 0

            foreach skipNotchs

                if ( skipNotchs.cnt == "" ) : break

                if ( ( notchs.( int( skipNotchs.cnt ) + adj ) ) == masconPos ) : notchSkip = 1 : break

            loop

        return notchSkip

    #global

    // MARK: init

    onexit *exit

    pname = ""
    port = 0
    cfile = ""
    dnotchs = ""
    maxRetryCount = 3

    sdim dnotchArr

    title titleName

    //// ここからconfig

    cfgAS_init "config.ascfg"

    if ( stat ) : handleError "設定ファイル \"config.ascfg\" が読み込めません。"

    cfgAS_read "ProgramName", pname
    cfgAS_read "PortNum", port
    cfgAS_read "Controller", cfile
    cfgAS_read "DisabledNotch", dnotchs
    cfgAS_read "MaxRetry", maxRetryCount

    // 無効ノッチ設定読み込み
    splitEx dnotchs, dnotchArr, ','

    foreach dnotchArr

        if ( dnotchArr.cnt == "0" ) : handleError "無効ノッチ設定に \"EB\" が指定されています。\n\"config.ascfg\" 内の \"DisabledNotch\" から \"0\" を削除してください。"

    loop



    //// ここからcfile

    cfgAS_init cfile

    if ( stat ) : handleError "コントローラー定義ファイル \""+ cfile +"\" が読み込めません。"

    notchSize = 0
    buttonSize = 0

    cfgAS_read "notchSize", notchSize
    cfgAS_read "buttonSize", buttonSize

    // 各段のY軸変換方向との対応
    dim notch, notchSize
    foreach notch

        cfgAS_read "notch"+ cnt, notch.cnt

    loop

    // ボタン名と配列要素の対応
    sdim buttonName, 64, buttonSize
    foreach buttonName

        cfgAS_read "buttonName"+ cnt, buttonName.cnt

    loop

    // ボタン名とdata.PUSH_BUTTONの各ビットの対応
    sdim buttonFlag, 64, buttonSize
    foreach buttonName

        cfgAS_read "buttonFlag"+ cnt, buttonFlag.cnt

    loop



    //// ここからconfig

    cfgAS_init "config.ascfg"

    if ( stat ) : handleError "設定ファイル \"config.ascfg\" が読み込めません。"

    // ボタン名と送信するキーコードの対応
    dim buttonKey, length( buttonName )
    foreach buttonName

        cfgAS_read buttonName.cnt, buttonKey.cnt

    loop


    // 検出とリトライ
    retryCount = 0

    repeat forever

        if ( retryCount == maxRetryCount ) : break

        aplsel pname, cnt

        if ( stat == 0 ) {

            dialog "プログラム \""+ refstr +"\" が検出されました。このプログラムにキー情報を送信しますか？", 2, titleName

            if ( stat == 6 ) : break

        } else {

            dialog "プログラムは検出されませんでした。再試行しますか？", 2, titleName

            if ( stat != 6 ) : break

        }

        retryCount ++

    loop

*start

    // MARK: start

    dim data, 16

    nowMasconPos = 0
    prevMasconPos = 0

    isCalibrated = false
    isPushedBtn = false

    noControllerMode = false

    // 検出とリトライ
    retryCount = 0

    repeat forever

        if ( retryCount == maxRetryCount ) : break

        joyGetPosEx data, port

        if ( stat ) {

            dialog "コントローラーが検出されませんでした。再試行しますか？", 2, titleName

            if ( stat != 6 ) {
                
                noControllerMode = true
                break

            }

        } else {

            break

        }

        retryCount ++

    loop
    
    aplfocus

    // MARK: loop

    repeat forever

        // 今のループ回数をいれておく
        nowCnt = cnt

        joyGetPosEx data, port

        // 切断されたら再試行
        if ( stat ) and ( noControllerMode == false ) : break

        redraw false

        pos 0, 0
        color 255, 255, 255 : boxf
        color

        mes "Port: "+ port

        foreach data

            mes "data("+ cnt +"): "+ data.cnt

            /** マスコン操作 */
            // MARK: mascon

            nowMasconPos = data.MASCON_POS

            // メインループが初回ならマスコン制御をスキップ
            if ( nowCnt ) {

                if ( wasIncreasedMasconPos ) {

                    if ( notchSkipProcess( dnotchArr, notch, nowMasconPos, Increase ) == false ) : logmes "Sended masconB" : aplkey buttonKey.masconB

                }

                if ( WasDecreasedMasconPos ) {

                    if ( notchSkipProcess( dnotchArr, notch, nowMasconPos, Decrease ) == false ) : logmes "Sended masconP" : aplkey buttonKey.masconP

                }

            }

            prevMasconPos = nowMasconPos

            /** 非常投入操作 */

            if ( data.MASCON_POS == notch.0 ) {

                // 連続キャリブレーション回避用
                if ( isCalibrated == false ) {

                    repeat 16

                        logmes "Sended masconB (EB)" : aplkey buttonKey.masconB

                    loop

                    isCalibrated = true

                }

            } else {

                isCalibrated = false

            }

            /** Button */
            // MARK: button

            if ( data.PUSH_BUTTON ) {

                // 連続押下回避用
                if ( isPushedBtn == false ) {

                    // buttonFlagの0-1要素は空データなのでスキップ
                    repeat length( buttonFlag ) -singleButtonIndex, singleButtonIndex

                        // 押されているボタンを各ビットから識別
                        if ( data.PUSH_BUTTON && buttonFlag.cnt ) {

                            aplkey buttonKey.cnt

                        }

                    loop

                    isPushedBtn = true

                }

            } else {

                isPushedBtn = false

            }

            
    
        loop

        redraw true

        await 1

    loop

    goto *start

*exit

    end