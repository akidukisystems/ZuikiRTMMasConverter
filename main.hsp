
    #include "mod_joystick.as"
    #include "hspext.as"
    #include "cfg.as"

    #packopt name "ZRMC"

    // MARK: define

    #enum   MASCON_POS  = 3 // マスコン位置
    #enum   PUSH_BUTTON = 8 // 押されているボタン
    #enum   PUSHING         // 押されているボタンの数

    #define titleName   "Zuiki RTM MasConverter"

    #enum masconB = 0
    #enum masconP
    #enum btnA
    #enum btnB
    #enum btnX
    #enum btnY
    #enum btnZL
    #enum btnLL
    #enum btnZR
    #enum btnRR
    #enum btnPL
    #enum btnMN
    #enum btnSH
    #enum btnHM


    #module zrmcerr

        #define global handleError(%1, %2=0, %3=0) handleErrorF@zrmcerr %1, %2, %3

        #deffunc local handleErrorF str errmessage, int type, int value

            if ( type ) {

                dialog "エラー: "+ errmessage +"\n開発者にお問い合わせください。\n\nデバッグ用コード: "+ value, 1, titleName@

            } else {

                dialog "エラー: "+ errmessage, 1, titleName@

            }

            end

        return

    #global

    // MARK: init

    onexit *exit

    pname = ""
    port = 0
    cfile = ""
    dnotchs = ""
    maxRetryCount = 3

    sdim dnotchArr

    title titleName

    // ここからconfig

    cfgAS_init "config.ascfg"

    if ( stat ) : handleError "設定ファイル \"config.ascfg\" が読み込めません。"

    cfgAS_read "ProgramName", pname
    cfgAS_read "PortNum", port
    cfgAS_read "Controller", cfile
    cfgAS_read "DisabledNotch", dnotchs
    cfgAS_read "MaxRetry", maxRetryCount

    splitEx dnotchs, dnotchArr, ','

    foreach dnotchArr

        if ( dnotchArr.0 == "0" ) : handleError "無効ノッチ設定に \"EB\" が指定されています。\n\"config.ascfg\" 内の \"DisabledNotch\" から \"0\" を削除してください。"

    loop



    // ここからcfile

    cfgAS_init cfile

    if ( stat ) : handleError "コントローラー定義ファイル \""+ cfile +"\" が読み込めません。"

    notchSize = 0
    buttonSize = 0

    cfgAS_read "notchSize", notchSize
    cfgAS_read "buttonSize", buttonSize

    dim notch, notchSize

    foreach notch

        cfgAS_read "notch"+ cnt, notch.cnt

    loop

    sdim buttonName, 64, buttonSize

    foreach buttonName

        cfgAS_read "button"+ cnt, buttonName.cnt

    loop

    buttonFlag.0 = 0
    buttonFlag.1 = 0
    buttonFlag.2 = 4
    buttonFlag.3 = 2
    buttonFlag.4 = 8
    buttonFlag.5 = 1
    buttonFlag.6 = 64
    buttonFlag.7 = 16
    buttonFlag.8 = 128
    buttonFlag.9 = 32
    buttonFlag.10 = 512
    buttonFlag.11 = 256
    buttonFlag.12 = 8192
    buttonFlag.13 = 4096

    dim buttonKey, length( buttonName )



    // ここからconfig

    cfgAS_init "config.ascfg"

    if ( stat ) : handleError "設定ファイル \"config.ascfg\" が読み込めません。"

    foreach buttonName

        cfgAS_read buttonName.cnt, buttonKey.cnt

    loop


    // 検出とリトライ
    retryCount = 0

    repeat -1

        if ( retryCount == maxRetryCount ) : break

        aplsel pname, cnt

        if ( stat == 0 ) {

            dialog "プログラム \""+ refstr +"\" が検出されました。このプログラムにキー情報を送信しますか？", 2, titleName

            if ( stat == 6 ) : break

        } else {

            dialog "プログラムは検出されませんでした。再試行しますか？", 2, titleName

            if ( stat != 6 ) : break

        }

        retryCount ++

    loop

*start

    // MARK: start

    dim data, 16

    nowMasconPos = 0
    prevMasconPos = 0

    isCalibrated = 0
    isPushedBtn = 0

    noControllerMode = 0

    // 検出とリトライ
    retryCount = 0

    repeat -1

        if ( retryCount == maxRetryCount ) : break

        joyGetPosEx data, port

        if ( stat ) {

            dialog "コントローラーが検出されませんでした。再試行しますか？", 2, titleName

            if ( stat != 6 ) {
                
                noControllerMode = 1
                break

            }

        } else {

            break

        }

        retryCount ++

    loop
    
    aplfocus

    // MARK: loop

    repeat -1

        nowCnt = cnt

        joyGetPosEx data, port

        if ( stat ) and ( noContrillerMode == 0 ) : break

        redraw 0

        pos 0, 0
        color 255, 255, 255 : boxf
        color

        mes "Port: "+ port

        foreach data

            mes "data("+ cnt +"): "+ data.cnt

            /** マスコン操作 */
            // MARK: mascon

            nowMasconPos = data.MASCON_POS

            if ( nowCnt ) {

                if ( prevMasconPos > nowMasconPos ) {

                    // ノッチスキップ
                    notchSkip = 0

                    foreach dnotchArr

                        if ( dnotchArr.cnt == "" ) : break

                        if ( ( notch.int( dnotchArr.cnt ) ) == nowMasconPos ) : notchSkip = 1 : break

                    loop

                    if ( notchSkip == 0 ) : logmes "Sended masconB" : aplkey buttonKey.masconB

                }

                if ( prevMasconPos < nowMasconPos ) {

                    // ノッチスキップ
                    notchSkip = 0

                    foreach dnotchArr

                        if ( dnotchArr.cnt == "" ) : break

                        if ( ( notch.( int( dnotchArr.cnt ) +1 ) ) == nowMasconPos ) : notchSkip = 1 : break

                    loop

                    if ( notchSkip == 0 ) : logmes "Sended masconP" : aplkey buttonKey.masconP

                }

            }

            prevMasconPos = nowMasconPos

            /** 非常投入操作 */

            if ( data.MASCON_POS == 0 ) {

                if ( isCalibrated == 0 ) {

                    repeat 16

                        logmes "Sended masconB (EB)" : aplkey buttonKey.masconB

                    loop

                    isCalibrated = 1

                }

            } else {

                isCalibrated = 0

            }

            /** Button */
            // MARK: button

            if ( data.PUSH_BUTTON ) {

                if ( isPushedBtn == 0 ) {

                    repeat length( buttonFlag ) -2, 2

                        if ( peek( data.PUSH_BUTTON, 0 ) && buttonFlag.cnt ) {

                            aplkey buttonKey.cnt

                        }

                    loop

                    isPushedBtn = 1

                }

            } else {

                isPushedBtn = 0

            }

            
    
        loop

        redraw 1

        await 1

    loop

    goto *start

*exit

    end