
    #include "mod_joystick.as"
    #include "hspext.as"
    #include "cfg.as"

    #packopt name "ZRMC"

    // MARK: define

    #enum   MASCON_POS  = 3 // マスコン位置
    #enum   PUSH_BUTTON = 8 // 押されているボタン
    #enum   PUSHING         // 押されているボタンの数

    #define btnA    4
    #define btnB    2
    #define btnX    8
    #define btnY    1
    /*
    #define btnAU   
    #define btnAD
    #define btnAL
    #define btnAR
    */
    #define btnZL   64
    #define btnLL   16
    #define btnZR   128
    #define btnRR   32
    #define btnPL   512
    #define btnMN   256
    #define btnSH   8192
    #define btnHM   4096

    #enum masconB = 0
    #enum masconP
    #enum btnAkey
    #enum btnBkey
    #enum btnXkey
    #enum btnYkey
    #enum btnZLkey
    #enum btnLLkey
    #enum btnZRkey
    #enum btnRRkey
    #enum btnPLkey
    #enum btnMNkey
    #enum btnSHkey
    #enum btnHMkey

    // MARK: init

    onexit *exit

    pname = ""
    port = 0
    cfile = ""
    dnotchs = ""
    sdim dnotchArr

    dim buttons, 14

    title "Zuiki RTM MasConverter"

    cfgAS_init "config.ascfg"
    cfgAS_read "ProgramName", pname
    cfgAS_read "PortNum", port
    cfgAS_read "Controller", cfile
    cfgAS_read "DisabledNotch", dnotchs

    splitEx dnotchs, dnotchArr, ','

    foreach dnotchArr

        if ( dnotchArr.0 == "0" ) : dialog "無効ノッチ設定に\"EB\"段が設定されています。続行できません。" : stop

    loop

    keyName.0 = "MasconB"
    keyName.1 = "MasconP"
    keyName.2 = "ButtonA"
    keyName.3 = "ButtonB"
    keyName.4 = "ButtonX"
    keyName.5 = "ButtonY"
    keyName.6 = "ButtonZL"
    keyName.7 = "ButtonLL"
    keyName.8 = "ButtonZR"
    keyName.9 = "ButtonRR"
    keyName.10 = "ButtonPL"
    keyName.11 = "ButtonMN"
    keyName.12 = "ButtonSH"
    keyName.13 = "ButtonHM"

    if ( length( keyName ) != length( buttons ) ) : mes "not match array length. line:"+ __line__ : stop

    foreach keyName

        cfgAS_read keyName.cnt, buttons.cnt

    loop

    cfgAS_init cfile

    dim notch, 15

    foreach notch

        cfgAS_read "notch"+ cnt, notch.cnt

    loop


    // 検出とリトライ
    retryCount = 0

    repeat -1

        if ( retryCount == 3 ) : break

        aplsel pname, cnt

        if ( stat == 0 ) {

            dialog "プログラム \""+ refstr +"\" が検出されました。このプログラムにキー情報を送信しますか？", 2, "Zuiki RTM MasConverter"

            if ( stat == 6 ) : break

        } else {

            dialog "プログラムは検出されませんでした。再試行しますか？", 2, "Zuiki RTM MasConverter"

            if ( stat != 6 ) : break

        }

        retryCount ++

    loop

*start

    // MARK: start

    dim data, 16

    nowMasconPos = 0
    prevMasconPos = 0

    isCalibrated = 0
    isPushedBtn = 0

    noControlerMode = 0

    // 検出とリトライ
    retryCount = 0

    repeat -1

        if ( retryCount == 3 ) : break

        joyGetPosEx data, port

        if ( stat ) {

            dialog "コントローラーが検出されませんでした。再試行しますか？", 2, "Zuiki RTM MasConverter"

            if ( stat != 6 ) {
                
                noControlerMode = 1
                break

            }

        } else {

            break

        }

        retryCount ++

    loop
    
    aplfocus

    repeat -1

        joyGetPosEx data, port

        if ( stat ) and ( noControlerMode == 0 ) : break

        redraw 0

        pos 0, 0
        color 255, 255, 255 : boxf
        color

        mes "Port: "+ port

        foreach data

            mes "data("+ cnt +"): "+ data.cnt

            /** マスコン操作 */
            // MARK: mascon

            nowMasconPos = data.MASCON_POS

            if ( cnt ) {

                if ( prevMasconPos > nowMasconPos ) {

                    notchSkip = 0

                    foreach dnotchArr

                        if ( dnotchArr.cnt == "" ) : break

                        if ( ( notch.int( dnotchArr.cnt ) ) == nowMasconPos ) : notchSkip = 1 : break

                    loop

                    if ( notchSkip == 0 ) : logmes "+" : aplkey buttons.masconB

                }

                if ( prevMasconPos < nowMasconPos ) {

                    notchSkip = 0

                    foreach dnotchArr

                        if ( dnotchArr.cnt == "" ) : break

                        if ( ( notch.( int( dnotchArr.cnt ) +1 ) ) == nowMasconPos ) : notchSkip = 1 : break

                    loop

                    if ( notchSkip == 0 ) : logmes "-" : aplkey buttons.masconP

                }

            }

            prevMasconPos = nowMasconPos

            /** 非常投入操作 */

            if ( data.MASCON_POS == 0 ) {

                if ( isCalibrated == 0 ) {

                    repeat 16

                        logmes "+E" : aplkey buttons.masconB

                    loop

                    isCalibrated = 1

                }

            } else {

                isCalibrated = 0

            }

            /** Button */
            // MARK: button

            if ( data.PUSH_BUTTON ) {

                if ( isPushedBtn == 0 ) {

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnA ) {

                        aplkey buttons.btnAkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnB ) {

                        aplkey buttons.btnBkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnX ) {

                        aplkey buttons.btnXkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnY ) {

                        aplkey buttons.btnYkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnZL ) {

                        aplkey buttons.btnZLkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnLL ) {

                        aplkey buttons.btnLLkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnZR ) {

                        aplkey buttons.btnZRkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnRR ) {

                        aplkey buttons.btnRRkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnPL ) {

                        aplkey buttons.btnPLkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnMN ) {

                        aplkey buttons.btnMNkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnSH ) {

                        aplkey buttons.btnSHkey

                    }

                    if ( peek( data.PUSH_BUTTON, 0 ) && btnHM ) {

                        aplkey buttons.btnHMkey

                    }

                }

                isPushedBtn = 1

            } else {

                isPushedBtn = 0

            }

            
    
        loop

        redraw 1

        await 1

    loop

    goto *start

*exit

    end